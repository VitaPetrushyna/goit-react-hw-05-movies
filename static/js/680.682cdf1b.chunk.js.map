{"version":3,"file":"static/js/680.682cdf1b.chunk.js","mappings":"mLAEaA,E,OAAiBC,GAAAA,OAAH,qqB,SCCdC,EAAc,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAC5B,OAAO,SAACH,EAAD,CAAgBI,QAASD,EAAzB,sBACR,C,kGCAYE,EAAmB,SAAC,EAE/BC,GACI,IAAD,IAFDC,MAASC,EAER,EAFQA,GAAIC,EAEZ,EAFYA,YAAaC,EAEzB,EAFyBA,MAAOC,EAEhC,EAFgCA,SAGnC,OACE,eAAI,UAASH,EAAb,UACE,UAAC,KAAD,CAAMI,GAAE,kBAAaJ,GAAMK,MAAO,CAAEC,KAAMR,GAA1C,WACE,gBACES,IAAKN,EAAW,UAAMO,EAAAA,GAAN,YAAsBP,GAAgBQ,EACtDC,IAAKR,EACLC,SAAUA,KAEZ,4BACE,wBAAKD,KACL,iCAAOC,EAASQ,MAAM,EAAG,IAAzB,gBAKT,E,kBCtBYC,EAAanB,EAAAA,GAAAA,GAAH,2RAaVoB,EAAcpB,EAAAA,GAAAA,GAAH,kLCXXqB,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAalB,EAAxB,EAAwBA,cAAxB,OAC1B,iCACE,SAACe,EAAD,UAAcG,KACd,SAACJ,EAAD,UACGG,EAAOE,KAAI,SAAAlB,GAAK,OACf,SAACF,EAAD,CAEEK,MAAOH,EAAMG,MACbH,MAAOA,EACPD,cAAeA,GAHVC,EAAMC,GAFE,QAJK,C,oJC0D5B,UAtDa,WACX,OAAwBkB,EAAAA,EAAAA,UAAS,GAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAoCF,EAAAA,EAAAA,UAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAA4BJ,EAAAA,EAAAA,UAAS,IAArC,eAAOH,EAAP,KAAeQ,EAAf,KACA,GAA4BL,EAAAA,EAAAA,UAASM,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BR,EAAAA,EAAAA,UAAS,MAAnC,eAAOS,EAAP,KAAcC,EAAd,KAGMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE8BC,EAAAA,EAAAA,IAAiBb,GAF/C,OAEUc,EAFV,OAIIV,GAAU,SAAAW,GAAS,wBAAQA,IAAR,OAAsBD,EAAYE,SAAlC,IACnBb,EAAcW,EAAYG,aAC1BV,EAAUF,EAAAA,EAAAA,UANd,gDAQII,EAAS,EAAD,IACRF,EAAUF,EAAAA,EAAAA,UATd,sGADc,uBAAC,WAAD,wBAeda,CAAelB,EAChB,GAAE,CAACA,IAMJ,OACE,gCACGM,IAAWD,EAAAA,EAAAA,OAAe,wBAC1BC,IAAWD,EAAAA,EAAAA,UAAkB,SAAC,IAAD,IAE7BC,IAAWD,EAAAA,EAAAA,WACV,gBAAKc,MAAO,CAAEC,MAAO,OAArB,SAA+BZ,IAEhCF,IAAWD,EAAAA,EAAAA,UAAmBT,IAC7B,SAAC,IAAD,CACEA,OAAQA,EACRC,YAAa,kBACblB,cAAe+B,IAGA,IAAlBd,EAAOyB,QAAgBnB,IAAeF,IACrC,SAAC,IAAD,CAAaxB,YApBF,WACfyB,GAAQ,SAAAc,GAAS,OAAIf,EAAO,CAAX,GAClB,MAsBF,C,sDC5DM,IAAMK,EAAS,CACpBiB,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W","sources":["components/BtnLoadMore/BtnLodMore.styled.jsx","components/BtnLoadMore/BtnLoadMore.jsx","components/MovieGalleryItem/MovieGalleryItem.jsx","components/MovieGallery/MovieGallery.styled.jsx","components/MovieGallery/MovieGallery.jsx","pages/HomePage/HomePage.jsx","utils/Status.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ButtonLoadMore = styled.button`\n  margin-top: 15px;\n  margin-left: 600px;\n  padding: 8px 16px;\n  border-radius: 2px;\n  background: linear-gradient(90deg, #070927, #3876fc);\n\n  transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  text-align: center;\n  display: inline-block;\n  color: #fff;\n  border: 0;\n  text-decoration: none;\n  cursor: pointer;\n  font-family: inherit;\n  font-size: 18px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 500;\n  min-width: 180px;\n  box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\n  :hover,\n  :focus {\n    background-color: #2b5d2e;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ButtonLoadMore } from './BtnLodMore.styled';\n\nexport const BtnLoadMore = ({ btnLoadMore }) => {\n  return <ButtonLoadMore onClick={btnLoadMore}>Load more</ButtonLoadMore>;\n};\n\nBtnLoadMore.propTypes = {\n  btnLoadMore: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport { BASE_URL_IMG } from '../../services/movies.Api';\nimport fallback from '../../images/fallback.jpg';\nimport { Link } from 'react-router-dom';\n\nexport const MovieGalleryItem = (\n  { movie: { id, poster_path, title, overview } },\n  locationState\n) => {\n  return (\n    <li data-id={id}>\n      <Link to={`/movies/${id}`} state={{ from: locationState }}>\n        <img\n          src={poster_path ? `${BASE_URL_IMG}/${poster_path}` : fallback}\n          alt={title}\n          overview={overview}\n        />\n        <div>\n          <h3>{title}</h3>\n          <p>{`${overview.slice(0, 50)}...`}</p>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nMovieGalleryItem.propTypes = {\n  movie: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const MoviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 15px;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const TitleHeader = styled.h2`\n  color: white;\n  text-align: center;\n  padding: 20px;\n  background: linear-gradient(90deg, #070927, #3876fc);\n  margin: 20px auto;\n  height: 25px;\n`;\n","import PropTypes from 'prop-types';\nimport { MovieGalleryItem } from '../MovieGalleryItem/MovieGalleryItem';\nimport { MoviesList, TitleHeader } from './MovieGallery.styled';\n\nexport const MovieGallery = ({ movies, titleHeader, locationState }) => (\n  <>\n    <TitleHeader>{titleHeader}</TitleHeader>\n    <MoviesList>\n      {movies.map(movie => (\n        <MovieGalleryItem\n          key={movie.id}\n          title={movie.title}\n          movie={movie}\n          locationState={locationState}\n        />\n      ))}\n    </MoviesList>\n  </>\n);\n\nMovieGallery.propTypes = {\n  titleHeader: PropTypes.string,\n  locationState: PropTypes.object.isRequired,\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { getTrendingMovie } from '../../services/movies.Api';\nimport { MovieGallery } from '../../components/MovieGallery/MovieGallery';\nimport { Status } from '../../utils/Status';\nimport { Loader } from '../../components/Loader/Loader';\nimport { BtnLoadMore } from '../../components/BtnLoadMore/BtnLoadMore';\n\nconst Home = () => {\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(0);\n  const [movies, setMovies] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n  // const [loading, setLoading] = useState(false);\n\n  const location = useLocation();\n\n  useEffect(() => {\n    async function trendingMovies() {\n      try {\n        const fetchMovies = await getTrendingMovie(page);\n\n        setMovies(prevState => [...prevState, ...fetchMovies.results]);\n        setTotalPages(fetchMovies.total_pages);\n        setStatus(Status.RESOLVED);\n      } catch (error) {\n        setError(error);\n        setStatus(Status.REJECTED);\n      } finally {\n        // setLoading(false);\n      }\n    }\n    trendingMovies(page);\n  }, [page]);\n\n  const loadMore = () => {\n    setPage(prevState => page + 1);\n  };\n\n  return (\n    <>\n      {status === Status.IDLE && <></>}\n      {status === Status.PENDING && <Loader />}\n      {/* {loading && <Loader />} */}\n      {status === Status.REJECTED && (\n        <div style={{ color: 'red' }}>{error}</div>\n      )}\n      {status === Status.RESOLVED && movies && (\n        <MovieGallery\n          movies={movies}\n          titleHeader={'Trending today:'}\n          locationState={location}\n        />\n      )}\n      {movies.length !== 0 && totalPages !== page && (\n        <BtnLoadMore btnLoadMore={loadMore} />\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","export const Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n"],"names":["ButtonLoadMore","styled","BtnLoadMore","btnLoadMore","onClick","MovieGalleryItem","locationState","movie","id","poster_path","title","overview","to","state","from","src","BASE_URL_IMG","fallback","alt","slice","MoviesList","TitleHeader","MovieGallery","movies","titleHeader","map","useState","page","setPage","totalPages","setTotalPages","setMovies","Status","status","setStatus","error","setError","location","useLocation","useEffect","getTrendingMovie","fetchMovies","prevState","results","total_pages","trendingMovies","style","color","length","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}