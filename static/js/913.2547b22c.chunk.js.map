{"version":3,"file":"static/js/913.2547b22c.chunk.js","mappings":"mRAIaA,EAAmB,SAAC,GAS1B,IAAD,IARJC,MACEC,EAOE,EAPFA,MACAC,EAME,EANFA,aACAC,EAKE,EALFA,OAKE,IAJFC,SAAAA,OAIE,MAJS,GAIT,EAHFC,EAGE,EAHFA,YAIIC,EAA4B,GAD9B,EAFFC,aAIIC,EAAWN,EAAaO,MAAM,EAAG,GAEvC,OACE,iCACE,gBACEC,IAAKL,EAAW,UAAMM,EAAAA,GAAN,YAAsBN,GAAgBO,EACtDC,IAAKZ,KAEP,0BACGA,EADH,KACYO,EADZ,QAGA,wCAAgBF,EAAhB,QACA,sCACA,uBAAIF,KACJ,mCACCD,EAAOW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACV,4BAAgBA,EAAhB,MAAWD,EADD,MAKjB,E,mCChCYE,GAAaC,E,OAAAA,IAAOC,EAAAA,GAAPD,CAAH,wKC0EvB,EApEyB,WAAO,IAAD,QACrBE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOtB,EAAP,KAAcuB,EAAd,KACA,GAA4BD,EAAAA,EAAAA,UAASE,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MAuBjB,OApBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEL,EAAUF,EAAAA,EAAAA,SADZ,mBAGqCQ,EAAAA,EAAAA,IAAgBZ,GAHrD,OAGUa,EAHV,OAKIV,EAASU,GACTP,EAAUF,EAAAA,EAAAA,UAELS,GACHC,EAAAA,GAAAA,MAAY,kDATlB,kDAYIN,EAAS,EAAD,IACRF,EAAUF,EAAAA,EAAAA,UAbd,2DADc,uBAAC,WAAD,wBAiBdW,CAAoBf,EACrB,GAAE,CAACA,KAGF,2BACGK,IAAWD,EAAAA,EAAAA,OAAe,wBAC1BC,IAAWD,EAAAA,EAAAA,UAAkB,SAACY,EAAA,EAAD,IAC7BX,IAAWD,EAAAA,EAAAA,WACV,gBAAKa,MAAO,CAAEC,MAAO,OAArB,SAA+BX,IAEhCF,IAAWD,EAAAA,EAAAA,UAAmBxB,IAC7B,iCACE,SAAC,KAAD,CAAMuC,GAAI,IAAV,sBACA,4BACE,SAACxC,EAAD,CAAkBC,MAAOA,KACzB,4BACE,mDACA,SAACiB,EAAD,CACEsB,GAAG,UACHC,MAAO,CAAEC,KAAI,iBAAEZ,QAAF,IAAEA,GAAF,UAAEA,EAAUW,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAF1C,sBAMA,SAACxB,EAAD,CACEsB,GAAG,OACHC,MAAO,CAAEC,KAAI,iBAAEZ,QAAF,IAAEA,GAAF,UAAEA,EAAUW,aAAZ,aAAE,EAAiBC,YAAnB,QAA2B,KAF1C,sBAQF,SAAC,EAAAC,SAAD,CAAU9B,SAAS,GAAnB,UACE,SAAC,KAAD,OAEF,SAAC,KAAD,CAAS+B,SAAS,qBAM7B,C,sDC3EM,IAAMnB,EAAS,CACpBoB,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,SAAU,W","sources":["components/MovieDetailsCard/MovieDetailsCard.jsx","pages/MovieDetailsPage/MovieDetailsPage.styled.jsx","pages/MovieDetailsPage/MovieDetailsPage.jsx","utils/Status.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { BASE_URL_IMG } from 'services/movies.Api';\nimport fallback from '../../images/fallback.jpg';\n\nexport const MovieDetailsCard = ({\n  movie: {\n    title,\n    release_date,\n    genres,\n    overview = '',\n    poster_path,\n    vote_average,\n  },\n}) => {\n  const userRating = vote_average * 10;\n  const yearData = release_date.slice(0, 4);\n\n  return (\n    <>\n      <img\n        src={poster_path ? `${BASE_URL_IMG}/${poster_path}` : fallback}\n        alt={title}\n      />\n      <h3>\n        {title} ({yearData})\n      </h3>\n      <p>User Score: {userRating}%</p>\n      <h4>Overview</h4>\n      <p>{overview}</p>\n      <h4>Genres</h4>\n      {genres.map(({ id, name }) => (\n        <span key={id}>{name} </span>\n      ))}\n    </>\n  );\n};\n\nMovieDetailsCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    vote_average: PropTypes.number.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n      })\n    ),\n  }),\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const StyledList = styled(NavLink)`\n  color: black;\n\n  &.active {\n    color: orange;\n  }\n\n  :hover:not(.active),\n  :focus-visible:host(.active) {\n    color: #3b3be3;\n  }\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useParams, useLocation, Link } from 'react-router-dom';\nimport { getDetailsMovie } from '../../services/movies.Api';\nimport { MovieDetailsCard } from '../../components/MovieDetailsCard/MovieDetailsCard';\nimport { Status } from '../../utils/Status';\nimport { Loader } from '../../components/Loader/Loader';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { StyledList } from './MovieDetailsPage.styled';\n\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [error, setError] = useState(null);\n\n  const location = useLocation();\n  // const backLinkHref = location?.state?.from ?? '/';\n\n  useEffect(() => {\n    async function searchDetailsMovies() {\n      setStatus(Status.PENDING);\n      try {\n        const fetchDetailsMovies = await getDetailsMovie(movieId);\n\n        setMovie(fetchDetailsMovies);\n        setStatus(Status.RESOLVED);\n\n        if (!fetchDetailsMovies) {\n          toast.error('Sorry, there is no information about this film');\n        }\n      } catch (error) {\n        setError(error);\n        setStatus(Status.REJECTED);\n      }\n    }\n    searchDetailsMovies(movieId);\n  }, [movieId]);\n\n  return (\n    <div>\n      {status === Status.IDLE && <></>}\n      {status === Status.PENDING && <Loader />}\n      {status === Status.REJECTED && (\n        <div style={{ color: 'red' }}>{error}</div>\n      )}\n      {status === Status.RESOLVED && movie && (\n        <>\n          <Link to={'/'}>Go back</Link>\n          <div>\n            <MovieDetailsCard movie={movie} />\n            <div>\n              <p>Additional information</p>\n              <StyledList\n                to=\"reviews\"\n                state={{ from: location?.state?.from ?? '/' }}\n              >\n                Reviews\n              </StyledList>\n              <StyledList\n                to=\"cast\"\n                state={{ from: location?.state?.from ?? '/' }}\n              >\n                Cast\n              </StyledList>\n            </div>\n\n            <Suspense fallback=\"\">\n              <Outlet />\n            </Suspense>\n            <Toaster position=\"top-left\" />\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","export const Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  REJECTED: 'rejected',\n};\n"],"names":["MovieDetailsCard","movie","title","release_date","genres","overview","poster_path","userRating","vote_average","yearData","slice","src","BASE_URL_IMG","fallback","alt","map","id","name","StyledList","styled","NavLink","movieId","useParams","useState","setMovie","Status","status","setStatus","error","setError","location","useLocation","useEffect","getDetailsMovie","fetchDetailsMovies","toast","searchDetailsMovies","Loader","style","color","to","state","from","Suspense","position","IDLE","PENDING","RESOLVED","REJECTED"],"sourceRoot":""}